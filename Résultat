(X_train, y_train), (X_test, y_test) = cifar10.load_data()

batch_size = 128
epochs = 20
VALIDATION_SPLIT = 0.2
num_classes = 10

num_train, img_channels, img_rows, img_cols = X_train.shape
num_test, _, _, _= X_test.shape

print('X_train Shape:', X_train.shape)
training_samples = X_train.shape[0]
print("Training samples:", training_samples)
print("Test Samples:", y_test.shape[0])

class_names =['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

def create_cnn_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3),activation='relu', padding = 'same', input_shape=X_train.shape[1:]))

    # Adding more layers to improve the model
    model.add(Conv2D(32, (3, 3),activation='relu', padding = 'same'))
    model.add(MaxPooling2D(pool_size= (2,2)))
    model.add(Dropout(0.2))
    model.add(Conv2D(64, (3, 3),activation='relu', padding = 'same'))
    model.add(Conv2D(64, (3, 3), activation = 'relu'))
    model.add(MaxPooling2D(pool_size= (2, 2)))
    model.add(Dropout(0.3))
    model.add(Flatten())
    model.add(Dense(512,activation='relu'))
    model.add(Dropout(0.4))
    model.add(Dense(num_classes,activation='softmax'))
    return model

model = create_cnn_model()
model.summary()

model.compile(loss= 'categorical_crossentropy', optimizer = 'adam', metrics= ['accuracy'])

hist = model.fit(X_train, y_train,
            validation_data=(X_test, y_test),
            epochs=epochs,
            batch_size=batch_size)   

Val_accuracy = 0.7993   ,  val_los = 0.667

#2

def create_cnn_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3),activation='relu', padding = 'same', input_shape=X_train.shape[1:]))

    # Adding more layers to improve the model
    model.add(Conv2D(32, (3, 3),activation='relu', padding = 'same'))
    model.add(Conv2D(32, (3, 3),activation='relu', padding = 'same'))
    model.add(MaxPooling2D(pool_size= (2,2)))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(64, (3, 3),activation='relu', padding = 'same'))
    model.add(Conv2D(64, (3, 3), activation = 'relu'))
    model.add(MaxPooling2D(pool_size= (2, 2)))
    model.add(Dropout(0.3))

    model.add(Conv2D(128, (3, 3),activation='relu', padding = 'same'))
    model.add(Conv2D(128, (3, 3), activation = 'relu'))
    model.add(MaxPooling2D(pool_size= (2, 2)))
    model.add(Dropout(0.4))
    
    model.add(Flatten())
    model.add(Dense(512,activation='relu'))
    model.add(Dropout(0.4))
    model.add(Dense(num_classes,activation='softmax'))
    return model

val_ac = 0.81  val_los = 0.5

def create_cnn_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3),activation='relu', padding = 'same', input_shape=X_train.shape[1:]))

    # Adding more layers to improve the model
    model.add(Conv2D(32, (3, 3),activation='relu', padding = 'same'))
    model.add(Conv2D(32, (3, 3),activation='relu', padding = 'same'))
    model.add(MaxPooling2D(pool_size= (2,2)))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(64, (3, 3),activation='relu', padding = 'same'))
    model.add(Conv2D(64, (3, 3), activation = 'relu'))
    model.add(MaxPooling2D(pool_size= (2, 2)))
    model.add(Dropout(0.3))

    model.add(Conv2D(128, (3, 3),activation='relu', padding = 'same'))
    model.add(Conv2D(128, (3, 3), activation = 'relu'))
    model.add(MaxPooling2D(pool_size= (2, 2)))
    model.add(Dropout(0.4))
    
    model.add(Flatten())
    model.add(Dense(256,activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(num_classes,activation='softmax'))
    return model

0.81 0.566
